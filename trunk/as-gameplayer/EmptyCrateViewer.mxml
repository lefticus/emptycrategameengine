<?xml version="1.0" encoding="utf-8"?>

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" 
      layout="absolute"
      creationComplete="initVars(); service.send();">
  
  <mx:Script>
    <![CDATA[
      import mx.collections.ArrayCollection;
      import mx.rpc.events.ResultEvent;
      import mx.controls.Alert;
      import mx.controls.Menu;
      import mx.events.MenuEvent;
      import com.adobe.serialization.json.JSON;
      import CharacterSpeech;

      private var m_Menu:Menu;
      private var m_Object_Image_Map:Object = new Object();;
      private var m_Current_Clicked_Object:Object;
      private var m_Game_Data:Object;

      [Bindable]
      [Embed(source="lookat.png")]
      public var LookAtIcon:Class;

      [Bindable]
      [Embed(source="talkto.png")]
      public var TalkToIcon:Class;

      [Bindable]
      [Embed(source="useexit.png")]
      public var UseExitIcon:Class;

      [Bindable]
      [Embed(source="locked.svg")]
      public var LockedIcon:Class;


      [Bindable]
      public var gameURL:String;

      private function initVars():void
      {
        gameURL = "http://game.emptycrate.com/emptycrate/game_data/" + Application.application.parameters.gameid;
      }

      private function findObject(a:Array, field:String, value:Object):Object
      {
        for each (var item:Object in a)
        {
          if (item[field] == value)
          {
            return item;
          }
        }
        return null;
      }

      private function onJSONLoad(event:ResultEvent):void
      {
        var rawData:String = String(event.result);
        var pattern:RegExp = /\\\'/g;
        rawData = rawData.replace(pattern, "'");
        var data:Array = rawData.split("\n");

        rteText.text = "RawData:\n";
        rteText.text += rawData;

        var game:Object;
        var media:Array = new Array();
        var character_template:Array = new Array();
        var room_template:Array = new Array();
        var item_template:Array = new Array();

        for each (var objstr:String in data)
        {
          rteText.text += "\n\nParsing String: " + objstr;
          var arr:Object = (JSON.decode(objstr) as Object);
          rteText.text += "\n\nParsed Obj Type: " + arr.type ;

          switch (arr.type)
          {
            case "media":
              media[arr.nid] = arr;
              break;
            case "character_template":
              character_template[arr.nid] = arr;
              break;
            case "room_template":
              room_template[arr.nid] = arr;
              break;
            case "item_template":
              item_template[arr.nid] = arr;
              break;
            case "game":
              game = arr;
              break;
            default:
              rteText.text += "\n\nUknown objtype: " + arr.type;
          }
        }	

        var gamedata:Object = {media:media, game:game, character_template:character_template, room_template:room_template, item_template:item_template};
        playGame(gamedata);
      }

      private function playScript(script:String):void
      {
        import mx.utils.StringUtil;
        var data:Array = script.split("\n");
        for each (var scriptline:String in data)
        {
          playScriptLine(StringUtil.trim(scriptline));
        }
      }

      private function playScriptLine(script:String):void
      {
        import mx.utils.StringUtil;
        rteText.text += "\n\nplayingScript: " + script;
        var params:Array = script.split(" ");
        switch(StringUtil.trim(params[0]))
        {
          case "set_flag":
            setFlag(StringUtil.trim(params[1]));
            break;
          case "clear_flag":
            clearFlag(StringUtil.trim(params[1]));
            break;
            
        }  
      }

      private function playGame(gamedata:Object):void
      {
        rteText.text += "\n\nplayGame called";
        rteText.text += "\n\nStarting Room: " + gamedata.game.starting_room_name;
        m_Game_Data = gamedata;
        m_Game_Data.flags = new Object();
        m_Game_Data.question_count = 0;
        m_Game_Data.questions_asked = 0;

        for each (var room:Object in m_Game_Data.game.room)
        {
          if (room.hasOwnProperty("question"))
          {
            m_Game_Data.question_count += room.question.length;
          }
        }
        playScript(gamedata.game.start_game_script);
        showRoom(gamedata.game.starting_room_name);
      }

      private function showRoom(room_name:String):void
      {
        if (m_Game_Data.current_room != null)
        {
          playScript(m_Game_Data.current_room.exit_room_script);
        }

        rteText.text += "\n\nShowing Room: " + room_name;
        var room:Object = findObject(m_Game_Data.game.room, "name", room_name);

        m_Game_Data.current_room = room;

        var room_base:Object = m_Game_Data.room_template[room.rid];
        var room_background_media:Object = m_Game_Data.media[room_base.background];

        while (image_canvas.numChildren > 1)
        {
          image_canvas.removeChildAt(1);
        }

        m_Object_Image_Map = new Object();

        rteText.text += "\n\nLoading image: " + room_background_media.file_urls[0];
        background.load(room_background_media.file_urls[0]);

        for each (var room_exit:Object in room.exit)
        {
          var exit:Object = findObject(room_base.exit, "name", room_exit.exit_name);
          var exit_media:Object = m_Game_Data.media[exit.image];

          var exitimage:Image = new Image();
          exitimage.setStyle("rollOverEffect", glowImage);
          exitimage.load(exit_media.file_urls[0]);
          exitimage.addEventListener(MouseEvent.CLICK, exitClickHandler);
          image_canvas.addChild(exitimage);
          exitimage.id="exit_image_" + exit.name;
          exitimage.move(exit.x, exit.y);
          m_Object_Image_Map[exitimage.id] = room_exit;
        }

        for each (var room_item:Object in room.item)
        {
          rteText.text += "\n\nDisplaying room item: " + room_item.item_name;
          var item:Object = findObject(m_Game_Data.game.item, "name", room_item.item_name);
          rteText.text += "\n\nDisplaying room item: " + item.iid;
          var item_base:Object = m_Game_Data.item_template[item.iid];

          var item_media:Object = m_Game_Data.media[item_base.image];
          rteText.text += "\n\nLoading item image: " + item_media.file_urls[0];

          var itemimage:Image = new Image();
          itemimage.setStyle("rollOverEffect", glowImage);
          itemimage.load(item_media.file_urls[0]);
          itemimage.addEventListener(MouseEvent.CLICK, itemClickHandler);
          image_canvas.addChild(itemimage);
          itemimage.id="item_image_" + item.name;
          itemimage.move(room_item.x, room_item.y);
          m_Object_Image_Map[itemimage.id] = item;
        }


        for each (var room_character:Object in room.character)
        {
          var character:Object = findObject(m_Game_Data.game.character, "name", room_character.character_name);

          var character_base:Object = m_Game_Data.character_template[character.cid];
          var character_media:Object = m_Game_Data.media[character_base.image];

          rteText.text += "\n\nLoading character image: " + character_media.file_urls[0];
          var characterimage:Image = new Image();
          characterimage.setStyle("rollOverEffect", glowImage);
          characterimage.load(character_media.file_urls[0]);
          characterimage.addEventListener(MouseEvent.CLICK, characterClickHandler);
          image_canvas.addChild(characterimage);
          characterimage.id="character_image_" + character.name;
          characterimage.move(room_character.x, room_character.y);
          m_Object_Image_Map[characterimage.id] = character;
        }


        Alert.show(room.description, room.displayed_name);
        playScript(room.enter_room_script);

      }

      private function responsesCompleted(script:String):void
      {
        playScript(script);
      }

      private function characterTalkToMenuHandler(event:MenuEvent):void
      {
        import mx.managers.PopUpManager;
        var responseset:Array = new Array();
        var speak:CharacterSpeech = CharacterSpeech(PopUpManager.createPopUp(this, CharacterSpeech, false));
        PopUpManager.centerPopUp(speak);

        speak.script = event.item.script;
        speak.completedFunction = responsesCompleted;

        if (!event.item.hasOwnProperty("asked") || !event.item.asked)
        {
          event.item.asked = true;
          m_Game_Data.questions_asked++;
        }

        for each (var response:Object in event.item.response)
        {
          var character:Object = findObject(m_Game_Data.current_room.character, "character_name", response.character_name);
          var loc:Point = new Point(character.x, character.y);
          loc = image_canvas.contentToGlobal(loc);
          loc.y -= speak.height;
          responseset.push({response:response.response, character_name:findObject(m_Game_Data.game.character, "name", response.character_name).displayed_name, location:loc});
        }

        speak.responses = responseset;
      }

      private function setFlag(flag_name:String):void
      {
        m_Game_Data.flags[flag_name] = true;
      }

      private function clearFlag(flag_name:String):void
      {
        m_Game_Data.flags[flag_name] = false;
      }


      private function testFlag(flag_name:String):Boolean
      {
        if (flag_name == null || flag_name == "") 
        {
          return true;
        } else { 
          return m_Game_Data.flags[flag_name] == true;
        }
      }

      private function objectMenuHandler(event:MenuEvent):void
      {
        var eventname:String = event.item.@eventName;
        rteText.text += "\n\nMenu Handler: " + eventname;

        switch(eventname)
        {
        case "useexit":
          rteText.text += "\n\nUseexit menu event";
          if (testFlag(m_Current_Clicked_Object.test_flag))
          {
            playScript(m_Current_Clicked_Object.use_exit_script);
            showRoom(m_Current_Clicked_Object.destination_room);
          } else {
            Alert.show("The exit is locked.", "Notice", Alert.OK, null, null, LockedIcon);
          }
          break;

        case "take":
          rteText.text += "\n\nTake menu event";
          if (testFlag(m_Current_Clicked_Object.takable_flag))
          {
          } else {
            Alert.show("The item cannot be taken.", "Notice", Alert.OK, null, null, LockedIcon);
          }
          break;


        case "lookat":
          rteText.text += "\n\nLookat menu event";
          Alert.show(m_Current_Clicked_Object.description, m_Current_Clicked_Object.displayed_name);
          break;

        case "talkto":
          rteText.text += "\n\ntalkto menu event";
          var col:ArrayCollection = new ArrayCollection();

          var questions:Array = m_Game_Data.current_room.question.filter(
            function(item:*, index:int, array:Array):Boolean 
            {
              return item.character_name == m_Current_Clicked_Object.name
                     && testFlag(item.test_flag);
            },
            null
          );

          for each (var q:Object in questions)
          {
            col.addItem(q);
          }

          if (col.length == 0)
          {
            Alert.show("...", m_Current_Clicked_Object.displayed_name);
          } else {
            m_Menu = Menu.createMenu(image_canvas, col, false);
            m_Menu.labelField="question";
            m_Menu.addEventListener("itemClick", characterTalkToMenuHandler);
            m_Menu.show(event.menu.x,event.menu.y);
          }
          break;

        default:
          rteText.text += "\n\nunknown menu event";
        }
      }

      private function showObjectMenu(x:Object, y:Object, data:Object):void
      {
        m_Menu = Menu.createMenu(image_canvas, data, false);
        m_Menu.labelField="@label";
        m_Menu.iconField="@icon";
        m_Menu.addEventListener("itemClick", objectMenuHandler);
//        m_Menu.scaleX = .50;
//        m_Menu.scaleY = .50;
        m_Menu.show(x,y);
      }

      private function exitClickHandler(event:MouseEvent):void
      {
        var img:Image = event.currentTarget as Image;
        rteText.text += "\n\nExit clicked on: " + img.id;
        m_Current_Clicked_Object = m_Object_Image_Map[img.id];
        showObjectMenu(event.stageX, event.stageY, exitMenuData);
      }

      private function characterClickHandler(event:MouseEvent):void
      {
        var img:Image = event.currentTarget as Image;
        rteText.text += "\n\nCharacter clicked on: " + img.id;
        m_Current_Clicked_Object = m_Object_Image_Map[img.id];
        showObjectMenu(event.stageX, event.stageY, characterMenuData);
      }

      private function itemClickHandler(event:MouseEvent):void
      {
        var img:Image = event.currentTarget as Image;
        rteText.text += "\n\nItem clicked on: " + img.id;
        m_Current_Clicked_Object = m_Object_Image_Map[img.id];
        showObjectMenu(event.stageX, event.stageY, itemMenuData);
      }
    ]]>
  </mx:Script>
	
  <mx:HTTPService
    id="service"
    resultFormat="text"
    url="{gameURL}"
    result="onJSONLoad(event)" />
              
  <mx:Glow id="glowImage" duration="1000" 
    alphaFrom="1.0" alphaTo="0.0" 
    blurXFrom="0.0" blurXTo="20.0" 
    blurYFrom="0.0" blurYTo="20.0" 
    color="0xFFFFFF"/>

  <mx:XML id="characterMenuData">
    <root>
      <menuitem eventName="lookat" label="Look At" icon="LookAtIcon"/>
      <menuitem eventName="talkto" label="Talk To" icon="TalkToIcon"/>
    </root>
  </mx:XML>

  <mx:XML id="exitMenuData">
    <root>
      <menuitem eventName="lookat" label="Look At" icon="LookAtIcon"/>
      <menuitem eventName="useexit" label="Use Exit" icon="UseExitIcon"/>
    </root>
  </mx:XML>

  <mx:XML id="itemMenuData">
    <root>
      <menuitem eventName="lookat" label="Look At" icon="LookAtIcon"/>
      <menuitem eventName="use" label="Use" icon="UseItemIcon"/>
      <menuitem eventName="take" label="Take" icon="TakeItemIcon"/>
    </root>
  </mx:XML>


  <mx:Panel title="Game Info" width="100%" height="100%">
    <mx:TextArea id="rteText" width="80%" height="25%" editable="false"/>

    <mx:Canvas id="image_canvas">
      <mx:Image id="background"/>
    </mx:Canvas>        
  </mx:Panel>
</mx:Application>
